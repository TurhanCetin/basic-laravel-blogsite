version: '3.7'
services:

  #PHP Service
  app:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    image: php:7.4.13-fpm
    container_name: php
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      PHP_EXTENSION_XDEBUG: 1
      PHP_IDE_CONFIG: "serverName=<your ip>"
      XDEBUG_CONFIG: "remote_port=9003 remote_autostart=1"
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  #Nginx Service
  webserver:
    image: nginx
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_USER: ${DB_ROOT_USER}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker/mysql/initial-sql:/docker-entrypoint-initdb.d
      - ./docker/mysql/persisted-volume:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  #RabbitMq Service
  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: rabbitmq
    restart: unless-stopped
    tty: true
    ports:
      # The standard AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    networks:
      - app-network

  #Mailhog Service
  # mailhog:
  #   image: mailhog/mailhog:latest
  #   container_name: mailhog
  #   restart: always
  #   ports:
  #     - 1025:1025
  #     - 8025:8025
  #   networks:
  #     - app-network

#docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:
    driver: local
